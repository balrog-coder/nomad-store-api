name: app-ci-pipeline

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}

on:
  push:
    branches:
      - main
    paths:
      - "Dockerfile"
      - ".github/workflows/**"
      - ".deploy/**"
      - "src/**"
  pull_request:
    branches:
      - main

jobs:
  # test:
  #   name: Run api tests with Mocha
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 16
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     - run: npm ci
  #     - run: npm test

  # build-and-push-docker-image:
  #   name: Build and push Docker image
  #   runs-on: ubuntu-latest
  #   needs: test
  #   environment: nomad-stage
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: docker login --username ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}
  #     - run: docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .
  #     - run: docker push ${{ secrets.DOCKER_IMAGE_NAME }}

  # build-ami:
  #   name: Build AMI image
  #   env:
  #     PKR_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
  #     PKR_VAR_docker_password: ${{ secrets.DOCKER_PASSWORD }}
  #     PKR_VAR_docker_image_name: ${{ secrets.DOCKER_IMAGE_NAME }}
  #   environment: nomad-stage
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-docker-image
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: bash .deploy/scripts/packer-install.sh
  #     - run: cd .deploy/packer && packer validate image.pkr.hcl
  #     - name: build ami image
  #       run: cd .deploy/packer && packer build image.pkr.hcl

  infra-terraform-stage:
    name: stage infrastructure deployment
    env:
      TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
      TF_VAR_web_app_url: ${{ secrets.WEB_APP_URL }}
      TF_VAR_web_hook_secret: ${{ secrets.WEB_HOOK_SECRET }}
    environment: nomad-stage
    runs-on: ubuntu-latest
    # needs: build-ami
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
      - name: run terraform init in services dir
        run: cd .deploy/terraform/stage/services/webserver-cluster && terraform init
      - name: deploy webserver cluster on aws
        run: cd .deploy/terraform/stage/services/webserver-cluster && terraform apply -auto-approve
